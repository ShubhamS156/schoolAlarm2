TODO:
thread safe nav for the menu

Story:

shared resource: lcd
actually currentMode is also shared, but here we are treating as it is not coz it is just used to check condition, so race condition will only lead to drawing home once where it shouldnt have.

take mutex in every lcd writer function.

keyPressTask will only be allowed to change currentMode.
keyPressTask will handle navigations for everything. Different meaning for keys will be infered by checking for the currentMode.
if using keyPressTask only for nav and infered meaning of keys, will have to declare all the variables used in the task, will have to make some of them static , but waste of mem, as they wouldnt be needed after exiting say a particular mode.

loopFlag vs currentItem

right now on a mode exits on pressing down, but ahead a function will be called , so mode's content will be cleared after calling function and current menu will be
displayed.

every mode will have its own handler, which will take care of writing and clearing lcd.

->on pressing back, i think currently it is going to the root of the parent menu, instead make it go to the menu item from where it entered the child menu

-> figure out a way to start homescreen by default
======for this I'll call handleHome() before creating keyPress detection task, after handleHome() returns keyPress will be created.

-> goto homescreen after mode select| check if this works now

->make util functions thread safe
Implementing program schedule-> Done

Implement Alarm System->
Get active schedule in setup() from eeprom according to day.

    Maintain a counter for bell processed for the day
    If now is equal to counter's bell's hour and min-> Ring..
    Inc counter
    Check if countr > countBells for the sched.
    If yes we're done for the day,
    Else Repeat from line 41.

Currently I'm making the 1st programmed schedule active.

Change structure of porgSched to include an id. DONE.

Make another thread for alarm , if in homescreen it wont check for alarm.

After we're done for the day activate the next schedule.

FirstApproach-> we load the schedule at boot, after we're completed with one schedule we restart the device and hence the next schedule loaded automatically.

Implement-> second saturday
    store wether to check in eeprom.

Implement-> take date as input, declare holiday for that date. after it is processed remove it from eeprom.
Implement-> take date in SetDateTime
Implement-> Clear all Schedules
            Clear all Holidays.
Implement->if today is holiday after restart it'll treat as not holiday , so dont clear pref instantly ,clear at midnight.

Implement-> restart at every midnight.
Implement-> store idx of bell processing in eprom, reset this after the schedule is done, if current time > this bell then increment the bell until now is less the the bell to process.
Restart wherever required after changes like in schedule or today's active schedule or wether to check second sat